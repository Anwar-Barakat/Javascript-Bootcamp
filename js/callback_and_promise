/*
  What is callback : 
  a function that is passed into another one as an argument to 
  be executed later

  Example on callback hell
*/

function makeItRed(e) {
  e.target.style.color = "red";
}

function sayHello() {
  console.log("hi");
}

let btn = (document.getElementById("button").onclick = makeItRed);

setTimeout(sayHello, 2000);

setTimeout(() => {
  console.log("Download Photo");

  setTimeout(() => {
    console.log("Resize Photo");

    setTimeout(() => {
      console.log("Add Logo");
      setTimeout(() => {
        console.log("Show them");
      }, 4000);
    }, 3000);
  }, 2000);
}, 1000);

/*
  Promise : 

  - Something that will happen in the future
  - promise avoid callback hell
  - promise is the object that represent the status of an asynchronous operation 
    and its resulting value

    Promise Status: 
    1-	Pending: Initial State.
    2-	Fulfilled: Completed Successfully.
    3-	Rejected: Failed.

*/

let myPromise = new Promise((resolveFunction, rejectFunction) => {
  let connect = true;

  if (connect) resolveFunction("connection established");
  else rejectFunction(Error("connection failed"));
}).then(
  (resolveValue) => console.log(`good ${resolveValue}`),
  (rejectValue) => console.log(`good ${rejectValue}`)
);

console.log(myPromise); // good connection established
